import Head from "next/head";
import Link from "next/link";
import { useRef, useEffect, useState } from 'react'
import React from "react";
import Header from "../components/Header";
import HeroSection from "../components/HeroSection";
import ProjectSection from "../components/ProjectSection";
import ProblemSection from "../components/ProblemSection";
import SolutionSection from "../components/SolutionSection";
import WhySection from "../components/WhySection";
import FeaturesSection from "../components/FeaturesSection";
import InstaSection from "../components/InstaSection";
import MarketSection from "../components/MarketSection";
import TeamSection from "../components/TeamSection";
import PricingSection from "../components/PricingSection";
import SupportSection from "../components/SupportSection";
import WaitlistSection from "../components/WaitlistSection";
import Footer from "../components/Footer";

export function useInView(threshold = 0.2) {
  const ref = useRef<HTMLDivElement>(null)
  const [visible, setVisible] = useState(false)
  useEffect(() => {
    const observer = new window.IntersectionObserver(
      (entries) => {
        const entry = entries[0];
        if (entry) setVisible(entry.isIntersecting)
      },
      { threshold }
    )
    if (ref.current) observer.observe(ref.current)
    return () => observer.disconnect()
  }, [threshold])
  return [ref, visible] as const
}

export default function Home() {
  return (
    <>
      <Head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
        <title>LongevFit â€” More Than Fitness</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className="flex flex-col items-center w-full min-h-screen bg-[#f5f5f7]">
        <HeroSection />
        <ProjectSection />
        <ProblemSection />
        <SolutionSection />
        <WhySection />
        <FeaturesSection />
        <InstaSection />
        <MarketSection />
        <TeamSection />
        <PricingSection />
        <SupportSection />
        <WaitlistSection />
      </main>
      <Footer />
    </>
  );
}

export function WaitlistForm() {
  const [form, setForm] = useState({ name: '', email: '', message: '' })
  const [submitted, setSubmitted] = useState(false)
  const [errors, setErrors] = useState({ name: false, email: false, message: false })

  const validate = () => {
    const newErrors = {
      name: !form.name.trim(),
      email: !form.email.trim() || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(form.email),
      message: !form.message.trim(),
    }
    setErrors(newErrors)
    return !Object.values(newErrors).some(Boolean)
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (!validate()) return
    setSubmitted(true)
    setForm({ name: '', email: '', message: '' })
    setTimeout(() => setSubmitted(false), 6000)
  }

  return (
    <form className="flex flex-col gap-4 mt-3 items-stretch" onSubmit={handleSubmit} autoComplete="off" noValidate>
      <div>
        <label htmlFor="name" className="font-medium mb-1 block">Name *</label>
        <input
          id="name"
          type="text"
          className={`border-2 rounded-xl px-4 py-3 w-full bg-gray-50 focus:border-[#BBF246] transition ${errors.name ? 'border-red-500' : 'border-gray-200'}`}
          value={form.name}
          onChange={e => setForm(f => ({ ...f, name: e.target.value }))}
        />
      </div>
      <div>
        <label htmlFor="email" className="font-medium mb-1 block">Email *</label>
        <input
          id="email"
          type="email"
          className={`border-2 rounded-xl px-4 py-3 w-full bg-gray-50 focus:border-[#BBF246] transition ${errors.email ? 'border-red-500' : 'border-gray-200'}`}
          value={form.email}
          onChange={e => setForm(f => ({ ...f, email: e.target.value }))}
        />
      </div>
      <div>
        <label htmlFor="message" className="font-medium mb-1 block">Message *</label>
        <textarea
          id="message"
          rows={3}
          className={`border-2 rounded-xl px-4 py-3 w-full bg-gray-50 focus:border-[#BBF246] transition ${errors.message ? 'border-red-500' : 'border-gray-200'}`}
          value={form.message}
          onChange={e => setForm(f => ({ ...f, message: e.target.value }))}
        />
      </div>
      <button type="submit" className="bg-[#BBF246] text-[#222] rounded-full py-3 font-bold shadow hover:bg-[#d6fa7a] transition mt-2">Join Waitlist</button>
      {submitted && (
        <div className="bg-[#eaffc2] rounded-xl py-4 mt-4 font-semibold text-[#222] shadow text-center animate-fadeIn">
          Thank you for joining the waitlist!
        </div>
      )}
    </form>
  )
}
