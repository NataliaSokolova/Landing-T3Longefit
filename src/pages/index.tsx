import Head from "next/head";
import Link from "next/link";
import { useRef, useEffect, useState } from 'react'
import React from "react";
import AppleHeroSection from "../components/AppleHeroSection";
import AppleInstaSection from "../components/AppleInstaSection";
import ApplePricingSection from "../components/ApplePricingSection";

export function useInView(threshold = 0.2) {
  const ref = useRef<HTMLDivElement>(null)
  const [visible, setVisible] = useState(false)
  useEffect(() => {
    const observer = new window.IntersectionObserver(
      (entries) => {
        const entry = entries[0];
        if (entry) setVisible(entry.isIntersecting)
      },
      { threshold }
    )
    if (ref.current) observer.observe(ref.current)
    return () => observer.disconnect()
  }, [threshold])
  return [ref, visible] as const
}

export default function Home() {
  return (
    <>
      <Head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
        <title>LongevFit — More Than Fitness</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col items-center w-full min-h-screen bg-[#f5f5f7]">
        <AppleHeroSection />
        <AppleInstaSection />
        <ApplePricingSection />
        {/*
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
        </div>
        */}
      </main>
    </>
  );
}

export function WaitlistForm() {
  const [form, setForm] = useState({ name: '', email: '', message: '' })
  const [submitted, setSubmitted] = useState(false)
  const [errors, setErrors] = useState({ name: false, email: false, message: false })

  const validate = () => {
    const newErrors = {
      name: !form.name.trim(),
      email: !form.email.trim() || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(form.email),
      message: !form.message.trim(),
    }
    setErrors(newErrors)
    return !Object.values(newErrors).some(Boolean)
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (!validate()) return
    setSubmitted(true)
    setForm({ name: '', email: '', message: '' })
    setTimeout(() => setSubmitted(false), 6000)
  }

  return (
    <form className="flex flex-col gap-4 mt-3 items-stretch" onSubmit={handleSubmit} autoComplete="off" noValidate>
      <div>
        <label htmlFor="name" className="font-medium mb-1 block">Name *</label>
        <input
          id="name"
          type="text"
          className={`border-2 rounded-xl px-4 py-3 w-full bg-gray-50 focus:border-[#BBF246] transition ${errors.name ? 'border-red-500' : 'border-gray-200'}`}
          value={form.name}
          onChange={e => setForm(f => ({ ...f, name: e.target.value }))}
        />
      </div>
      <div>
        <label htmlFor="email" className="font-medium mb-1 block">Email *</label>
        <input
          id="email"
          type="email"
          className={`border-2 rounded-xl px-4 py-3 w-full bg-gray-50 focus:border-[#BBF246] transition ${errors.email ? 'border-red-500' : 'border-gray-200'}`}
          value={form.email}
          onChange={e => setForm(f => ({ ...f, email: e.target.value }))}
        />
      </div>
      <div>
        <label htmlFor="message" className="font-medium mb-1 block">Message *</label>
        <textarea
          id="message"
          rows={3}
          className={`border-2 rounded-xl px-4 py-3 w-full bg-gray-50 focus:border-[#BBF246] transition ${errors.message ? 'border-red-500' : 'border-gray-200'}`}
          value={form.message}
          onChange={e => setForm(f => ({ ...f, message: e.target.value }))}
        />
      </div>
      <button type="submit" className="bg-[#BBF246] text-[#222] rounded-full py-3 font-bold shadow hover:bg-[#d6fa7a] transition mt-2">Join Waitlist</button>
      {submitted && (
        <div className="bg-[#eaffc2] rounded-xl py-4 mt-4 font-semibold text-[#222] shadow text-center animate-fadeIn">
          Thank you for joining the waitlist!
        </div>
      )}
    </form>
  )
}
